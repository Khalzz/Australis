[gd_scene load_steps=8 format=3 uid="uid://btnlv2vwv2vd8"]

[ext_resource type="Script" path="res://Scripts/Label.gd" id="1_vm8iq"]
[ext_resource type="Texture2D" uid="uid://bjfeom0n50oat" path="res://Assets/UI/InGame/FishingArrow.svg" id="3_50q3t"]
[ext_resource type="Script" path="res://Scripts/FishingNode.gd" id="3_dyto1"]
[ext_resource type="PackedScene" uid="uid://c01b7svihusgt" path="res://Scenes/UI/game_ui.tscn" id="5_qe2aq"]

[sub_resource type="GDScript" id="GDScript_yv2bm"]
script/source = "extends CharacterBody2D
@export var debugging = false
@export var camera_following = true # by default the camera will follow the player
@export var can_open_inventory = true # by default the camera will follow the player

@export var camera: Camera2D
@export var fixed_items: Array[int] = []

var objective = \"\"
var ui

# Other data
var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\") * 3
var state = Enums.PlayerStates.IDLE

# Movement
var direction
var shieldDirection = Vector2(0,0)
var tilt

const SPEED = 800.0
var acceleration = 2000
var max_speed = 400.0
var last_direction = 1
var jump_direction = 0

# Jumping
const JUMP_VELOCITY = -700.0
var MAX_JUMP_TIME = 0.2
var is_jumping = false

var jump_timer = 0

# Attacks with timer
var isActive = true
var isWalking = false
var jumpCount = 2

# Controls
var jump_input
var timer = 0.0
var downed_timer = 0.0
var axisDirection

# fishing
var fishing_position
var hooked = false

var paused = false 
var interacting = false

var fading = true
var fading_in = false


func _ready():
	ui = $HUD
	
func _process(delta):
	if camera_following:
		camera.follow(position, false, null)

	if fading:
		if fading_in:
			camera.zoom.x = lerp(camera.zoom.x, 10.0, delta)
			camera.zoom.y = lerp(camera.zoom.y, 10.0, delta)
			ui.fadable.color.a = lerp(ui.fadable.color.a, 1.0, delta * 10.0)
			camera.offset.y = lerp(camera.offset.y, 0.0, delta * 2.0)
		else:
			camera.zoom.x = lerp(camera.zoom.x, 1.4, delta * 2.0)
			camera.zoom.y = lerp(camera.zoom.y, 1.4, delta * 2.0)
			ui.fadable.color.a = lerp(ui.fadable.color.a, 0.0, delta * 10.0)

	jump_input = Input.is_action_pressed(\"jump\")
	if Input.is_action_just_pressed(\"pause\") and isActive and state != Enums.PlayerStates.FISHING and !ui.new_item_active and can_open_inventory:
		toggle_inventory()

func toggle_inventory():
	paused = !paused
	ui.toggle_inventary(paused)
	state = Enums.PlayerStates.IDLE
	isActive = !paused

func _physics_process(delta):
	touchingFloor(delta) # this function i will use it if the user is touching the floor or not
	stateReseters() # reseters of data
	fishing(delta)

	if isActive:
		inputMovement() # here i get the values of direction
		jumpLogic(delta)
		movementLogic(delta)
	move_and_slide()

func inputMovement():
	axisDirection = Input.get_vector(\"left\", \"right\", \"down\", \"up\")
	if (axisDirection.x < 0.1 and axisDirection.x > -0.1):
		axisDirection.x = 0
	if (axisDirection.y < 0.1 and axisDirection.y > -0.1):
		axisDirection.y = 0
	if (axisDirection.x > 0.8):
		axisDirection.x = 1
	if (axisDirection.x < -0.8):
		axisDirection.x = -1
	if !isWalking:
		direction = axisDirection
	else:
		direction = axisDirection / 2.1

func touchingFloor(delta):
	if is_on_floor():
		jump_direction = last_direction
		jumpCount = 2
	else:
		velocity.y += gravity * delta
		state = Enums.PlayerStates.FALLING

func stateReseters():
	if isWalking and direction.x == 0:
		isWalking = false

	if jump_input:
		if (state == Enums.PlayerStates.FALLING and jumpCount > 0) or is_on_floor():
			jump_direction = last_direction
			jumpCount -= 1
			is_jumping = true
			jump_timer = 0

func movementLogic(delta):
	if direction.x != 0:
		last_direction = direction.x
		if is_on_floor():
			if (direction.x >= 0.1 or direction.x <= -0.1):
				state = Enums.PlayerStates.WALKING
			velocity.x = move_toward(velocity.x, direction.x * max_speed, (acceleration * delta) * 10)
		else:
			velocity.x = move_toward(velocity.x, direction.x * max_speed, (acceleration * delta) * 5)
	elif direction.x == 0 and state != Enums.PlayerStates.JUMPING and is_on_floor():
			state = Enums.PlayerStates.IDLE
			velocity.x = move_toward(velocity.x, 0, 100)

func jumpLogic(delta):
	if !is_on_floor() and jumpCount > 1:
		jumpCount = 1
	if is_jumping:
		jump_timer += delta
		
		if jump_input and jump_timer < MAX_JUMP_TIME:
			state = Enums.PlayerStates.JUMPING
			velocity.y = JUMP_VELOCITY
		else:
			state = Enums.PlayerStates.FALLING
			is_jumping = false
			jump_timer = 0

# FISHING-------------------------------------------------------------------------------------------
func fishing(delta):
	if state == Enums.PlayerStates.FISHING:
		camera.offset.x = lerp(camera.offset.x, 400.0, delta * 7.0)
		position.x = fishing_position
		if Input.is_action_just_released(\"B\"):
			isActive = true
	else:
		camera.offset.x = lerp(camera.offset.x, 0.0, delta * 10.0)

# This function will let the triggers know that the player is touching it, so avoid using it in other elements
# there is a bug that when i interact with a interactable while walking, the player moves a bit
func interact(interaction, obj_position, move_to):
	if Input.is_action_just_pressed(\"A\") and isActive and is_on_floor():
		match interaction:
			Enums.InteractionStates.FISHING:
				hooked = false
				ui.toggle_fishing_ui(true)
				velocity.x = 0
				state = Enums.PlayerStates.FISHING
				isActive = false
				fishing_position = obj_position.x
			Enums.InteractionStates.MOVING_TO_PLACE:
				move_to_place(obj_position, move_to)
			Enums.InteractionStates.CHECKING_DIARY:
				paused = true
				ui.dialog.open_dialog(\"res://Assets/Dialogue/FirstTimeReadingDiary.txt\", checkDiary)
			Enums.InteractionStates.BUYING:
				paused = true
				ui.dialog.open_dialog(\"res://Assets/Dialogue/MerchantDialogue.txt\", ui.activate_merchant)
			Enums.InteractionStates.TALKING_TO_SAILOR:
				paused = true
				ui.dialog.open_dialog(\"res://Assets/Dialogue/TalkingToSailor.txt\", null)
			Enums.InteractionStates.TALKING_TO_CAPTAIN:
				paused = true
				ui.dialog.open_dialog(\"res://Assets/Dialogue/TalkingToCaptain.txt\", move_to_tierra_firme)
			Enums.InteractionStates.ENTERING_HOME_FIRST_TIME:
				paused = true
				move_to_place(position, \"res://Scenes/Levels/AlexLLegaCasa.tscn\")
			Enums.InteractionStates.SLEEPING:
				paused = true
				
				match Items.dia:
					0:
						ui.cinematic.open_cinematic(\"res://Assets/Cinematics/AlexSeAcuesta/\", alex_want_to_work)
					1:
						ui.cinematic.open_cinematic(\"res://Assets/Cinematics/AlexSeAcuesta/\", alex_want_to_work_2)
					2:
						ui.cinematic.open_cinematic(\"res://Assets/Cinematics/AlexSeAcuesta/\", null)
				Items.dia += 1
			Enums.InteractionStates.TALKING_TO_SELLER_FISHING_TUTORIAL:
				paused = true
				ui.dialog.open_dialog(\"res://Assets/Dialogue/FishingTutorial.txt\", update_level_state)
			Enums.InteractionStates.ENTERING_HOME_SECOND_TIME:
				paused = true
				Items.house_night_1 = true
				move_to_place(position, \"res://Scenes/Levels/AlexLLegaCasa.tscn\")
			Enums.InteractionStates.TALKING_TO_SELLER_SECOND_DAY:
				paused = true
				ui.dialog.open_dialog(\"res://Assets/Dialogue/MerchantDialogueSecondDay.txt\", update_level_state)
			Enums.InteractionStates.TALKING_TO_SELLER_DONT_KNOW_FISH:
				paused = true
				ui.dialog.open_dialog(\"res://Assets/Dialogue/MerchantDontKnowFish.txt\", update_level_state)
			Enums.InteractionStates.ENTERING_HOME_INVESTIGATION_TUTORIAL:
				paused = true
				Items.altered_day = 1
				move_to_place(position, \"res://Scenes/Levels/AlexLLegaCasa.tscn\")
			Enums.InteractionStates.INTERACTING_WITH_MOUNTAIN:
				if Items.dia == 3:
					var contains_elements = false
					
					for element in ui.inventory.inventory_management.inventory:
						if element != null:
							if element.item_id == 7:
								contains_elements = true
								break
					if contains_elements:
						ui.cinematic.open_cinematic(\"res://Assets/Cinematics/GettingInMountain/\", back_to_menu)
					else:
						ui.dialog.open_dialog(\"res://Assets/Dialogue/AlexCantGoToMountain.txt\", null)
				else:
					ui.cinematic.open_cinematic(\"res://Assets/Cinematics/AlexVeLaMontaÃ±a/\", update_level_state)

func back_to_menu():
	get_tree().change_scene_to_file(\"res://Scenes/MainMenu.tscn\")

func alex_want_to_work_2():
	ui.dialog.open_dialog(\"res://Assets/Dialogue/AlexNeedsToWorkAgain.txt\", null)
	update_level_state()
	
func alex_want_to_work():
	ui.dialog.open_dialog(\"res://Assets/Dialogue/AlexNeedsToWork.txt\", null)
	update_level_state()

func update_level_state():
	isActive = true
	paused = false
	$\"..\".state += 1

func move_to_tierra_firme():
	var obj_position = position
	var move_to = \"res://Scenes/Levels/AlexLlegaTierraFirme.tscn\"
	move_to_place(obj_position, move_to)
	
func move_to_place(obj_position, move_to):
	camera.looking_at_place = false
	camera_following = false
	camera.follow(obj_position, false, null)
	fading = true
	fading_in = true
	await get_tree().create_timer(1).timeout
	
	if move_to != \"\":
		get_tree().change_scene_to_file(move_to)

func checkDiary():
	ui.investigate.toggle_investigate(true)
	ui.investigate.load_uninvestigated(true)
"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_vfkqx"]
resource_local_to_scene = true
radius = 15.0
height = 56.0

[sub_resource type="GDScript" id="GDScript_ma68f"]
script/source = "extends CollisionShape2D

func _ready():
	pass # Replace with function body.

func _process(delta):
	pass
"

[node name="Player" type="CharacterBody2D"]
floor_snap_length = 0.0
script = SubResource("GDScript_yv2bm")

[node name="HUD" parent="." instance=ExtResource("5_qe2aq")]

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 1)
shape = SubResource("CapsuleShape2D_vfkqx")
debug_color = Color(0, 0.6, 0.701961, 0.419608)
script = SubResource("GDScript_ma68f")

[node name="Label" type="Label" parent="."]
offset_left = -47.0
offset_top = -62.0
offset_right = 47.0
offset_bottom = -36.0
text = "Jumping"
horizontal_alignment = 1
script = ExtResource("1_vm8iq")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -15.0
offset_top = -29.0
offset_right = 15.0
offset_bottom = 29.0
color = Color(1, 0.631373, 0.184314, 1)

[node name="FishingNode" type="Node2D" parent="."]
script = ExtResource("3_dyto1")

[node name="FishingArrow" type="Sprite2D" parent="FishingNode"]
z_index = -1
position = Vector2(55.22, 0)
scale = Vector2(0.5, 0.5)
texture = ExtResource("3_50q3t")
